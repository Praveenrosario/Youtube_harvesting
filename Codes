from googleapiclient.discovery import build
import pymongo
import mysql.connector
import pandas as pd
import streamlit as st

import googleapiclient.discovery

client=pymongo.MongoClient("mongodb://localhost:27017")
db=client["Youtube_data"]

import mysql.connector
connection = mysql.connector.connect(host="localhost",user="root",password="12345",database='youtube_data') 
mycursor=connection.cursor()

# create a api connection
def youtube_api():
 api_service_name = "youtube"
 api_version = "v3"
 api_key = ('AIzaSyC2WxkhoEpclJ7oymWhBWgfeMEtDdU0YBQ')
 youtube = googleapiclient.discovery.build(api_service_name,api_version,developerKey=api_key)
 return youtube
youtube = youtube_api()

#  get channel information
def get_channel_info(channel_id):
    response=youtube.channels().list(
                     id=channel_id,
                     part='snippet,statistics,contentDetails'
    )
 
    results=response.execute()
 
    for i in results['items']:
        data=dict(channel_Name=i['snippet']['title'],
               channel_Id=i['id'],
               Subscription_Count=i['statistics']['subscriberCount'],
               Channel_Views=i['statistics']['viewCount'],
               Channel_Description=i['snippet']['localized']['description'])
    return data

# get vedio ids
def get_vedio_ids(channel_id):
     vedio_ids=[]
     response=youtube.channels().list(id=channel_id,
                                   part='contentDetails').execute()
     play_id=response['items'][0]['contentDetails']['relatedPlaylists']['uploads']

     next_page_token=None

     while True:
          response1=youtube.playlistItems().list(
               part='snippet',
               playlistId=play_id,
               maxResults=25,
               pageToken=next_page_token).execute()
          for i in range(len(response1['items'])):
               vedio_ids.append(response1['items'][i]['snippet']['resourceId']['videoId'])
          next_page_token=response1.get('nextPageToken')
          if next_page_token is None:
               break
     return vedio_ids

#get vedio information
def get_Vedio_info(vedio_ids):
    vedio_data=[]
    for vedio_id in vedio_ids:
        request = youtube.videos().list(
            part="snippet,contentDetails,statistics",
                id=vedio_id
                )
        response=request.execute()
        
        for item in response["items"]:
            data=dict(channel_name=item['snippet']['channelTitle'],
                    cahnnel_id=item['snippet']['channelId'],
                    vedio_Id=item['id'],
                    Video_Name=item['snippet']['title'],
                    Video_Description=item['snippet']['description'],
                    Tags=item.get('etag'),
                    PublishedAt=item['snippet']['publishedAt'],
                    View_Count=item['statistics'].get('viewCount'),
                    Like_Count=item['statistics'].get('likeCount'),
                    Favorite_Count=item['statistics'].get ('favoriteCount'),
                    Comment_Count=item['statistics'].get('commentCount'),
                    Duration=item['contentDetails']['duration'],
                    Thumbnail=item['snippet'].get('thumbnails'),
                    Caption_Status=item['contentDetails']['caption']
                    )
            vedio_data.append(data)
    return vedio_data

def get_comment_info(vedio_ids):
    comment_data=[]
    try:
        for vedio_id in vedio_ids:
            request=youtube.commentThreads().list(
                part="snippet",
                videoId=vedio_id,
                maxResults=25
            )
            response=request.execute()
            
            for item in response['items']:
                data=dict(Comment_Id=item['snippet']['topLevelComment']['id'],
                          Comment_Text=item['snippet']['topLevelComment']['snippet']['textOriginal'],
                          Comment_Author=item['snippet']['topLevelComment']['snippet']['authorDisplayName'],
                          Comment_PublishedAt=item['snippet']['topLevelComment']['snippet']['publishedAt'],
                          )
                comment_data.append(data)
    except:
        pass
    return comment_data

def channel_details(channel_id):
    ch_details=get_channel_info(channel_id)
    ids_details=get_vedio_ids(channel_id)
    vi_details=get_Vedio_info(ids_details)
    com_details=get_comment_info(ids_details)
    

    coll1=db["channel_details"]
    coll1.insert_one({"channel_infomation":ch_details,"vedio_information":vi_details,"comment_information":com_details})

    return "upload completed"

def channel_tables():
    import mysql.connector
    connection = mysql.connector.connect(host="localhost",user="root",password="12345",database='youtube_data') 
    mycursor=connection.cursor()
    try:
        create_query ='''create table channels(channel_name Varchar(100),
                                            channel_Id Varchar(100)primary key,   
                                            subscription_Count bigint,
                                            channel_Views bigint,
                                            Channel_Description varchar(800))'''
        mycursor.execute(create_query)
        connection.commit()

    except:
        print("channels table already created")

    ch_list=[]
    db=client["Youtube_data"]
    coll1=db["channel_details"]
    for ch_data in coll1.find({}):
        ch_list.append(ch_data["channel_infomation"])
    df=pd.DataFrame(ch_list)

    for index, row in df.iterrows():
        insert_query='''insert into channels(channel_Name,
        channel_Id,
        Subscription_Count,
        Channel_Views,
        Channel_Description)
        
        values(%s,%s,%s,%s,%s)'''
        
        values=(row['channel_Name'],
                row['channel_Id'],
                row['Subscription_Count'],
                row['Channel_Views'],
                row['Channel_Description'])
        try:
            mycursor.execute(insert_query,values)
            connection.commit()
        
        except:
            print("sucessfull")

        
def vedio_tables():
    import mysql.connector
    connection = mysql.connector.connect(host="localhost",user="root",password="12345",database='youtube_data') 
    mycursor=connection.cursor()

    try:
        create_query ='''create table vedios(Channel_Name Varchar(200),
                                            cahnnel_id Varchar(200),
                                            vedio_Id Varchar(200) primary key,
                                            Video_Name Varchar(200),
                                            Video_Description Varchar(500),
                                            Tags Varchar(100),
                                            PublishedAt Varchar(100),
                                            View_Count bigint,
                                            Like_Count bigint,
                                            Favorite_Count bigint,
                                            Comment_Count bigint,
                                            Duration Varchar(200),
                                            Caption_Status Varchar(100))'''
        mycursor.execute(create_query)
        connection.commit()

    except:
        print("Vedios table already created")

    vi_list=[]
    db=client["Youtube_data"]
    coll1=db["channel_details"]
    for vi_data in coll1.find({},{"vedio_information"}):
        for i in range(len(vi_data["vedio_information"])):
            vi_list.append(vi_data['vedio_information'][i])
    df1=pd.DataFrame(vi_list)

    for index,row in df1.iterrows():
        insert_query='''insert into vedios(channel_name, cahnnel_id, vedio_Id, Video_Name,Video_Description, Tags, PublishedAt,
        View_Count,Like_Count, Favorite_Count, Comment_Count, Duration, Caption_Status)

        values(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)'''
        
        values=(row['channel_name'],
                row['cahnnel_id'],
                row['vedio_Id'],
                row['Video_Name'],
                row['Video_Description'],
                row['Tags'],
                row['PublishedAt'],
                row['View_Count'],
                row['Like_Count'],
                row['Favorite_Count'],
                row['Comment_Count'],
                row['Duration'],
                row['Caption_Status'],
                ) 

        try:
            mycursor.execute(insert_query,values)
            connection.commit()

        except:
            print('sucessfull')

def comment_tables():
    import mysql.connector
    connection = mysql.connector.connect(host="localhost",user="root",password="12345",database='youtube_data') 
    mycursor=connection.cursor()

    try:
        create_query ='''create table comments (Comment_Id Varchar(100)primary key,
                                                Comment_Text Varchar(250), 
                                                Comment_Author Varchar(150), 
                                                Comment_PublishedAt Varchar(100))'''
        mycursor.execute(create_query)
        connection.commit()

    except:
        print("Comment table already created")

    com_list=[]
    db=client["Youtube_data"]
    coll1=db["channel_details"]
    for com_data in coll1.find({},{"comment_information"}):
        for i in range(len(com_data["comment_information"])):
            com_list.append(com_data["comment_information"][i])
    df2=pd.DataFrame(com_list)

    for index,row in df2.iterrows():
        insert_query='''insert into comments(Comment_Id, 
                                            Comment_Text,
                                            Comment_Author,   
                                            Comment_PublishedAt)
                                            
                                            values(%s,%s,%s,%s)'''     
        values=(row['Comment_Id'],
                row['Comment_Text'],
                row['Comment_Author'],
                row['Comment_PublishedAt'])
        try:
            mycursor.execute(insert_query,values)
            connection.commit()

        except:
            print('sucessfull')

def tables():
    channel_tables()
    vedio_tables()
    comment_tables()
 
    return "Tables created sucessfully"

def show_ch_tables():
    ch_list=[]
    db=client["Youtube_data"]
    coll1=db["channel_details"]
    for ch_data in coll1.find({}):
        ch_list.append(ch_data["channel_infomation"])
        df=st.dataframe(ch_list)
        
        return df
    
def show_vd_tables():
    vi_list=[]
    db=client["Youtube_data"]
    coll1=db["channel_details"]
    for vi_data in coll1.find({},{"vedio_information"}):
        for i in range(len(vi_data["vedio_information"])):
            vi_list.append(vi_data['vedio_information'][i])
            df1=st.dataframe(vi_list)

            return df1
        
def show_com_tables():
    com_list=[]
    db=client["Youtube_data"]
    coll1=db["channel_details"]
    for com_data in coll1.find({},{"comment_information"}):
        for i in range(len(com_data["comment_information"])):
            com_list.append(com_data["comment_information"][i])
    df2=st.dataframe(com_list)

    return df2

with st.sidebar:
    st.title(":red[Youtube Data Harvesting and Warehousing]")

Channel_id=st.text_input("Enter The Channel ID","Enter The Channel ID")

if st.button("collect and store data"):
    ch_ids=[]
    db=client["Youtube_data"]
    coll1=db["channel_details"]
    for ch_data in coll1.find({}):
        ch_ids.append(ch_data["channel_infomation"]["channel_Id"])

    if Channel_id in ch_ids:
        st.success("Channel Details of the given channel id already exists")

    else:
        insert=channel_details(Channel_id)
        st.success(insert)

if st.button("Migrate to SQL"):
    Table=tables()
    st.success(Table)

show_table=st.radio("SELECT THE TABLE FOR VIEW",("CHANNELS","VIDEOS","COMMENTS"))

if show_table=="CHANNELS":
    show_ch_tables()

if show_table=="VIDEOS":
    show_vd_tables()

if show_table=="COMMENTS":
    show_com_tables()



questions=st.selectbox("Select your Questions",("1. All the videos and the channel name?",
                                               "2. Channels with most number of videos?",
                                               "3. 10 most viewed videos?",
                                               "4. comments in each videos?",
                                               "5. Videos with higest likes?",
                                               "6. Likes of all videos?",
                                               "7. views of each channel?",
                                               "8. Videos published in the year of 2022",
                                               "9. Average duration of all videos in each channel?",
                                               "10. Videos with highest number of comments?"))


if questions=="1. All the videos and the channel name?":
    query1='''SELECT Channel_Name,video_Name FROM vedios'''
    mycursor.execute(query1)
    t1=mycursor.fetchall()
    df0=pd.DataFrame(t1,columns=['channel name','video names'])
    st.write(df0)

elif questions=="2. Channels with most number of videos?":
    query2 = "SELECT Channel_Name, COUNT(vedio_Id) AS num_videos FROM vedios GROUP BY Channel_Name ORDER BY num_videos DESC"
    mycursor.execute(query2)
    results = mycursor.fetchall()
    df2 = pd.DataFrame(results, columns=['channel_title', 'num_videos'])
    st.write(df2)

elif questions=="3. 10 most viewed videos?":
    query3 = """SELECT Channel_Name, COUNT(*) AS video_count FROM vedios GROUP BY channel_name ORDER BY video_count DESC LIMIT 10"""
    mycursor.execute(query3)
    results = mycursor.fetchall()
    df3 = pd.DataFrame(results, columns=["Channel Name", "Video Count"])
    st.write(df3)

elif questions=="4. comments in each videos?":
    query4 = '''SELECT Comment_Text , COUNT(*) AS commment_count  FROM comments GROUP BY Comment_Text'''
    mycursor.execute(query4)
    results = mycursor.fetchall()
    df4 = pd.DataFrame(results, columns=["Comment_Text","comment_count"])
    st.write(df4)

elif questions=="5. Videos with higest likes?":
    query5 = '''SELECT vedio_Id, Video_Description, Like_Count FROM vedios ORDER BY Like_Count DESC LIMIT 5'''
    mycursor.execute(query5)
    results = mycursor.fetchall()
    df5 = pd.DataFrame(results, columns=["vedio_Id","Video_Description","Like_Count"])
    st.write(df5)

elif questions=="6. Likes of all videos?":
    query6 = "SELECT vedio_Id, Like_count FROM vedios"
    mycursor.execute(query6)
    results = mycursor.fetchall()
    df6 = pd.DataFrame(results, columns=['vedio_Id', 'Like_Count'])
    st.write(df6)

elif questions=="7. views of each channel?":
    query7 = "SELECT channel_name, SUM(channel_views) AS total_views FROM Channels GROUP BY channel_name"
    mycursor.execute(query7)
    results = mycursor.fetchall()
    df7 = pd.DataFrame(results, columns=["channel_id", "total_views"])
    st.write(df7)

elif questions=="8. Videos published in the year of 2022":
    query8 = "SELECT * FROM vedios WHERE YEAR(publishedAt) = '2022'"
    mycursor.execute(query8)
    results = mycursor.fetchall()
    df8 = pd.DataFrame(results, columns=[column[0] for column in mycursor.description])
    st.write(df8)

elif questions=="8. Videos published in the year of 2022":
    query9="SELECT cahnnel_id, AVG(Duration) FROM vedios GROUP BY cahnnel_id"
    mycursor.execute(query9)
    results = mycursor.fetchall()
    data = {'cahnnel_id': [], 'Duration': []}
    for cahnnel_id, Duration in results:
        data['cahnnel_id'].append(cahnnel_id)
        data['Duration'].append(Duration)
    df9 = pd.DataFrame(data)
    st.write(df9)


elif questions=="9. Average duration of all videos in each channel?":
    mycursor.execute("""SELECT cahnnel_id, AVG(Duration) FROM vedios GROUP BY cahnnel_id""")
    results = mycursor.fetchall()
    data = {'cahnnel_id': [], 'Duration': []}
    for cahnnel_id, Duration in results:
        data['cahnnel_id'].append(cahnnel_id)
        data['Duration'].append(Duration)
    df9 = pd.DataFrame(data)
    st.write(df9)

elif questions=="10. Videos with highest number of comments?":
    query10= """SELECT Channel_Name, view_Count, Comment_Count FROM vedios ORDER BY Comment_Count DESC LIMIT 10;"""
    mycursor.execute(query10)
    t2=mycursor.fetchall()
    df10 = pd.DataFrame(t2,columns=['channel_name','view_count','comment_count'])
    st.write(df10)
